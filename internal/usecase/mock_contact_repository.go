// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/davidterranova/contacts/internal/usecase (interfaces: ContactRepository)

// Package usecase is a generated GoMock package.
package usecase

import (
	context "context"
	reflect "reflect"

	domain "github.com/davidterranova/contacts/internal/domain"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockContactRepository is a mock of ContactRepository interface.
type MockContactRepository struct {
	ctrl     *gomock.Controller
	recorder *MockContactRepositoryMockRecorder
}

// MockContactRepositoryMockRecorder is the mock recorder for MockContactRepository.
type MockContactRepositoryMockRecorder struct {
	mock *MockContactRepository
}

// NewMockContactRepository creates a new mock instance.
func NewMockContactRepository(ctrl *gomock.Controller) *MockContactRepository {
	mock := &MockContactRepository{ctrl: ctrl}
	mock.recorder = &MockContactRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContactRepository) EXPECT() *MockContactRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockContactRepository) Delete(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockContactRepositoryMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockContactRepository)(nil).Delete), arg0, arg1)
}

// List mocks base method.
func (m *MockContactRepository) List(arg0 context.Context) ([]*domain.Contact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].([]*domain.Contact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockContactRepositoryMockRecorder) List(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockContactRepository)(nil).List), arg0)
}

// Save mocks base method.
func (m *MockContactRepository) Save(arg0 context.Context, arg1 *domain.Contact) (*domain.Contact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0, arg1)
	ret0, _ := ret[0].(*domain.Contact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockContactRepositoryMockRecorder) Save(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockContactRepository)(nil).Save), arg0, arg1)
}

// Update mocks base method.
func (m *MockContactRepository) Update(arg0 context.Context, arg1 uuid.UUID, arg2 func(domain.Contact) (domain.Contact, error)) (*domain.Contact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(*domain.Contact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockContactRepositoryMockRecorder) Update(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockContactRepository)(nil).Update), arg0, arg1, arg2)
}
