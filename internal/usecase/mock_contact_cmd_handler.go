// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/davidterranova/contacts/internal/usecase (interfaces: ContactCmdHandler)
//
// Generated by this command:
//    mockgen -destination=mock_contact_cmd_handler.go -package=usecase . ContactCmdHandler
// Package usecase is a generated GoMock package.
package usecase

import (
        uuid "github.com/google/uuid"
        gomock "go.uber.org/mock/gomock"
        reflect "reflect"
        domain "github.com/davidterranova/contacts/internal/domain"
        eventsourcing "github.com/davidterranova/contacts/pkg/eventsourcing"
)

// MockContactCmdHandler is a mock of ContactCmdHandler interface.
type MockContactCmdHandler struct {
        ctrl     *gomock.Controller
        recorder *MockContactCmdHandlerMockRecorder
}

// MockContactCmdHandlerMockRecorder is the mock recorder for MockContactCmdHandler.
type MockContactCmdHandlerMockRecorder struct {
        mock *MockContactCmdHandler
}

// NewMockContactCmdHandler creates a new mock instance.
func NewMockContactCmdHandler(ctrl *gomock.Controller) *MockContactCmdHandler {
        mock := &MockContactCmdHandler{ctrl: ctrl}
        mock.recorder = &MockContactCmdHandlerMockRecorder{mock}
        return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContactCmdHandler) EXPECT() *MockContactCmdHandlerMockRecorder {
        return m.recorder
}

// ApplyCommand mocks base method.
func (m *MockContactCmdHandler) ApplyCommand(arg0 *domain.Contact, arg1 eventsourcing.Command[domain.Contact]) (*domain.Contact, []eventsourcing.Event[domain.Contact], error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "ApplyCommand", arg0, arg1)
        ret0, _ := ret[0].(*domain.Contact)
        ret1, _ := ret[1].([]eventsourcing.Event[domain.Contact])
        ret2, _ := ret[2].(error)
        return ret0, ret1, ret2
}

// ApplyCommand indicates an expected call of ApplyCommand.
func (mr *MockContactCmdHandlerMockRecorder) ApplyCommand(arg0, arg1 any) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyCommand", reflect.TypeOf((*MockContactCmdHandler)(nil).ApplyCommand), arg0, arg1)
}

// Handle mocks base method.
func (m *MockContactCmdHandler) Handle(arg0 eventsourcing.Command[domain.Contact]) (*domain.Contact, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "Handle", arg0)
        ret0, _ := ret[0].(*domain.Contact)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// Handle indicates an expected call of Handle.
func (mr *MockContactCmdHandlerMockRecorder) Handle(arg0 any) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockContactCmdHandler)(nil).Handle), arg0)
}

// HydrateAggregate mocks base method.
func (m *MockContactCmdHandler) HydrateAggregate(arg0 eventsourcing.AggregateType, arg1 uuid.UUID) (*domain.Contact, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "HydrateAggregate", arg0, arg1)
        ret0, _ := ret[0].(*domain.Contact)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// HydrateAggregate indicates an expected call of HydrateAggregate.
func (mr *MockContactCmdHandlerMockRecorder) HydrateAggregate(arg0, arg1 any) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HydrateAggregate", reflect.TypeOf((*MockContactCmdHandler)(nil).HydrateAggregate), arg0, arg1)
}
