// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/davidterranova/contacts/internal/adapters/http (interfaces: App)

// Package http is a generated GoMock package.
package http

import (
	context "context"
	reflect "reflect"

	domain "github.com/davidterranova/contacts/internal/domain"
	usecase "github.com/davidterranova/contacts/internal/usecase"
	gomock "github.com/golang/mock/gomock"
)

// MockApp is a mock of App interface.
type MockApp struct {
	ctrl     *gomock.Controller
	recorder *MockAppMockRecorder
}

// MockAppMockRecorder is the mock recorder for MockApp.
type MockAppMockRecorder struct {
	mock *MockApp
}

// NewMockApp creates a new mock instance.
func NewMockApp(ctrl *gomock.Controller) *MockApp {
	mock := &MockApp{ctrl: ctrl}
	mock.recorder = &MockAppMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApp) EXPECT() *MockAppMockRecorder {
	return m.recorder
}

// CreateContact mocks base method.
func (m *MockApp) CreateContact(arg0 context.Context, arg1 usecase.CmdCreateContact) (*domain.Contact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateContact", arg0, arg1)
	ret0, _ := ret[0].(*domain.Contact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateContact indicates an expected call of CreateContact.
func (mr *MockAppMockRecorder) CreateContact(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContact", reflect.TypeOf((*MockApp)(nil).CreateContact), arg0, arg1)
}

// DeleteContact mocks base method.
func (m *MockApp) DeleteContact(arg0 context.Context, arg1 usecase.CmdDeleteContact) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteContact", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteContact indicates an expected call of DeleteContact.
func (mr *MockAppMockRecorder) DeleteContact(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteContact", reflect.TypeOf((*MockApp)(nil).DeleteContact), arg0, arg1)
}

// ListContacts mocks base method.
func (m *MockApp) ListContacts(arg0 context.Context, arg1 usecase.QueryListContact) ([]*domain.Contact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListContacts", arg0, arg1)
	ret0, _ := ret[0].([]*domain.Contact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListContacts indicates an expected call of ListContacts.
func (mr *MockAppMockRecorder) ListContacts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListContacts", reflect.TypeOf((*MockApp)(nil).ListContacts), arg0, arg1)
}

// UpdateContact mocks base method.
func (m *MockApp) UpdateContact(arg0 context.Context, arg1 usecase.CmdUpdateContact) (*domain.Contact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateContact", arg0, arg1)
	ret0, _ := ret[0].(*domain.Contact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateContact indicates an expected call of UpdateContact.
func (mr *MockAppMockRecorder) UpdateContact(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContact", reflect.TypeOf((*MockApp)(nil).UpdateContact), arg0, arg1)
}
